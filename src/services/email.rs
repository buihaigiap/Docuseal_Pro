use lettre::transport::smtp::authentication::Credentials;
use lettre::{AsyncSmtpTransport, AsyncTransport, Message, Tokio1Executor};
use std::env;

#[derive(Clone)]
pub struct EmailService {
    smtp_host: String,
    smtp_port: u16,
    smtp_username: String,
    smtp_password: String,
    from_email: String,
    from_name: String,
    use_tls: bool,
    test_mode: bool,
}

impl EmailService {
    pub fn new() -> Result<Self, Box<dyn std::error::Error + Send + Sync + 'static>> {
        let smtp_host = env::var("SMTP_HOST").unwrap_or_else(|_| "smtp.gmail.com".to_string());
        let smtp_port: u16 = env::var("SMTP_PORT")
            .unwrap_or_else(|_| "587".to_string())
            .parse()
            .unwrap_or(587);
        let smtp_username = env::var("SMTP_USERNAME")?;
        let smtp_password = env::var("SMTP_PASSWORD")?;
        let from_email = env::var("FROM_EMAIL")?;
        let from_name = env::var("FROM_NAME").unwrap_or_else(|_| "DocuSeal Pro".to_string());
        let use_tls: bool = env::var("SMTP_USE_TLS")
            .unwrap_or_else(|_| "true".to_string())
            .parse()
            .unwrap_or(true);
        let test_mode: bool = env::var("EMAIL_TEST_MODE")
            .unwrap_or_else(|_| "false".to_string())
            .parse()
            .unwrap_or(false);

        Ok(Self {
            smtp_host,
            smtp_port,
            smtp_username,
            smtp_password,
            from_email,
            from_name,
            use_tls,
            test_mode,
        })
    }

    pub async fn send_signature_request(
        &self,
        to_email: &str,
        to_name: &str,
        submission_name: &str,
        signature_link: &str,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync + 'static>> {
        if self.test_mode {
            println!("TEST MODE: Would send email to {} ({}) with link: {}", to_email, to_name, signature_link);
            return Ok(());
        }

        let subject = format!("Y√™u c·∫ßu k√Ω t√†i li·ªáu: {}", submission_name);

        let html_body = format!(
            r#"
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Y√™u c·∫ßu k√Ω t√†i li·ªáu</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            background-color: #f8f9fa;
            padding: 20px;
        }}
        .container {{
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
        }}
        .header h1 {{
            color: #007bff;
            margin-bottom: 10px;
        }}
        .content {{
            margin-bottom: 30px;
        }}
        .button {{
            display: inline-block;
            padding: 12px 24px;
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
            font-size: 14px;
            color: #6c757d;
            text-align: center;
        }}
        .warning {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìù Y√™u c·∫ßu k√Ω t√†i li·ªáu</h1>
            <p>Xin ch√†o <strong>{}</strong>,</p>
        </div>

        <div class="content">
            <p>B·∫°n nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu k√Ω t√†i li·ªáu t·ª´ h·ªá th·ªëng <strong>DocuSeal Pro</strong>.</p>

            <div class="warning">
                <strong>Quan tr·ªçng:</strong> Link k√Ω t√†i li·ªáu n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong th·ªùi gian gi·ªõi h·∫°n.
                Vui l√≤ng ho√†n th√†nh vi·ªác k√Ω trong th·ªùi gian s·ªõm nh·∫•t c√≥ th·ªÉ.
            </div>

            <p><strong>T√™n t√†i li·ªáu:</strong> {}</p>

            <p>Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ truy c·∫≠p v√† k√Ω t√†i li·ªáu:</p>

            <a href="{}" class="button">üìù Truy c·∫≠p v√† k√Ω t√†i li·ªáu</a>

            <p>N·∫øu n√∫t tr√™n kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ sao ch√©p v√† d√°n link sau v√†o tr√¨nh duy·ªát:</p>
            <p style="word-break: break-all; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace;">{}</p>
        </div>

        <div class="footer">
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng DocuSeal Pro.</p>
            <p>N·∫øu b·∫°n kh√¥ng mong mu·ªën nh·∫≠n email n√†y, vui l√≤ng b·ªè qua.</p>
            <p>&copy; 2025 DocuSeal Pro. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        </div>
    </div>
</body>
</html>
            "#,
            to_name, submission_name, signature_link, signature_link
        );

        let text_body = format!(
            "Xin ch√†o {},\n\n\
            B·∫°n nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu k√Ω t√†i li·ªáu '{}' t·ª´ h·ªá th·ªëng DocuSeal Pro.\n\n\
            Vui l√≤ng truy c·∫≠p link sau ƒë·ªÉ k√Ω t√†i li·ªáu:\n\
            {}\n\n\
            Link n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong th·ªùi gian gi·ªõi h·∫°n.\n\n\
            Tr√¢n tr·ªçng,\n\
            DocuSeal Pro",
            to_name, submission_name, signature_link
        );

        let email = Message::builder()
            .from(format!("{} <{}>", self.from_name, self.from_email).parse()?)
            .to(format!("{} <{}>", to_name, to_email).parse()?)
            .subject(subject)
            .multipart(
                lettre::message::MultiPart::alternative()
                    .singlepart(
                        lettre::message::SinglePart::builder()
                            .header(lettre::message::header::ContentType::TEXT_PLAIN)
                            .body(text_body),
                    )
                    .singlepart(
                        lettre::message::SinglePart::builder()
                            .header(lettre::message::header::ContentType::TEXT_HTML)
                            .body(html_body),
                    ),
            )?;

        let creds = Credentials::new(self.smtp_username.clone(), self.smtp_password.clone());

        let mailer = if self.use_tls {
            AsyncSmtpTransport::<Tokio1Executor>::starttls_relay(&self.smtp_host)?
                .credentials(creds)
                .build()
        } else {
            AsyncSmtpTransport::<Tokio1Executor>::relay(&self.smtp_host)?
                .credentials(creds)
                .build()
        };

        mailer.send(email).await?;
        println!("Email sent successfully to: {}", to_email);

        Ok(())
    }

    pub async fn send_user_activation_email(
        &self,
        to_email: &str,
        to_name: &str,
        activation_link: &str,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync + 'static>> {
        if self.test_mode {
            println!("TEST MODE: Would send activation email to {} ({}) with link: {}", to_email, to_name, activation_link);
            return Ok(());
        }

        let subject = "K√≠ch ho·∫°t t√†i kho·∫£n DocuSeal Pro".to_string();

        let html_body = format!(
            r#"
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>K√≠ch ho·∫°t t√†i kho·∫£n</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            background-color: #f8f9fa;
            padding: 20px;
        }}
        .container {{
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
        }}
        .header h1 {{
            color: #007bff;
            margin-bottom: 10px;
        }}
        .content {{
            margin-bottom: 30px;
        }}
        .button {{
            display: inline-block;
            padding: 12px 24px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            font-size: 12px;
            color: #666;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Ch√†o m·ª´ng ƒë·∫øn v·ªõi DocuSeal Pro!</h1>
        </div>
        <div class="content">
            <p>Xin ch√†o <strong>{}</strong>,</p>
            <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. ƒê·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n v√† b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng DocuSeal Pro, vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi:</p>
            <p style="text-align: center;">
                <a href="{}" class="button">K√≠ch ho·∫°t t√†i kho·∫£n</a>
            </p>
            <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ sao ch√©p v√† d√°n li√™n k·∫øt sau v√†o tr√¨nh duy·ªát:</p>
            <p><a href="{}">{}</a></p>
            <p>Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
        </div>
        <div class="footer">
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng DocuSeal Pro.</p>
            <p>N·∫øu b·∫°n kh√¥ng mong mu·ªën nh·∫≠n email n√†y, vui l√≤ng b·ªè qua.</p>
        </div>
    </div>
</body>
</html>
            "#,
            to_name, activation_link, activation_link, activation_link
        );

        let text_body = format!(
            "Xin ch√†o {},\n\nT√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o. ƒê·ªÉ k√≠ch ho·∫°t, truy c·∫≠p: {}\n\nLi√™n k·∫øt h·∫øt h·∫°n sau 24 gi·ªù.\n\nDocuSeal Pro",
            to_name, activation_link
        );

        let email = Message::builder()
            .from(format!("{} <{}>", self.from_name, self.from_email).parse()?)
            .to(format!("{} <{}>", to_name, to_email).parse()?)
            .subject(subject)
            .multipart(
                lettre::message::MultiPart::alternative()
                    .singlepart(
                        lettre::message::SinglePart::builder()
                            .header(lettre::message::header::ContentType::TEXT_PLAIN)
                            .body(text_body),
                    )
                    .singlepart(
                        lettre::message::SinglePart::builder()
                            .header(lettre::message::header::ContentType::TEXT_HTML)
                            .body(html_body),
                    ),
            )?;

        let creds = Credentials::new(self.smtp_username.clone(), self.smtp_password.clone());

        let mailer = if self.use_tls {
            AsyncSmtpTransport::<Tokio1Executor>::starttls_relay(&self.smtp_host)?
                .credentials(creds)
                .build()
        } else {
            AsyncSmtpTransport::<Tokio1Executor>::relay(&self.smtp_host)?
                .credentials(creds)
                .build()
        };

        mailer.send(email).await?;
        println!("Activation email sent successfully to: {}", to_email);

        Ok(())
    }

    pub async fn send_signature_completed(
        &self,
        to_email: &str,
        to_name: &str,
        submission_name: &str,
        submitter_name: &str,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync + 'static>> {
        if self.test_mode {
            println!("TEST MODE: Would send completion email to {} ({}) for submission: {}", to_email, to_name, submission_name);
            return Ok(());
        }

        let subject = format!("Ho√†n th√†nh k√Ω t√†i li·ªáu: {}", submission_name);

        let html_body = format!(
            r#"
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ho√†n th√†nh k√Ω t√†i li·ªáu</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            background-color: #f8f9fa;
            padding: 20px;
        }}
        .container {{
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
        }}
        .header h1 {{
            color: #28a745;
            margin-bottom: 10px;
        }}
        .success-icon {{
            font-size: 48px;
            color: #28a745;
            margin-bottom: 20px;
        }}
        .content {{
            margin-bottom: 30px;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
            font-size: 14px;
            color: #6c757d;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="success-icon">‚úÖ</div>
            <h1>Ho√†n th√†nh k√Ω t√†i li·ªáu</h1>
            <p>Xin ch√†o <strong>{}</strong>,</p>
        </div>

        <div class="content">
            <p>Ch√∫ng t√¥i xin th√¥ng b√°o r·∫±ng t√†i li·ªáu <strong>"{}"</strong> ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng b·ªüi <strong>{}</strong>.</p>

            <p>T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† l∆∞u tr·ªØ an to√†n trong h·ªá th·ªëng DocuSeal Pro.</p>

            <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</p>
        </div>

        <div class="footer">
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng DocuSeal Pro.</p>
            <p>&copy; 2025 DocuSeal Pro. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        </div>
    </div>
</body>
</html>
            "#,
            to_name, submission_name, submitter_name
        );

        let text_body = format!(
            "Xin ch√†o {},\n\n\
            T√†i li·ªáu '{}' ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng b·ªüi {}.\n\n\
            T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n trong h·ªá th·ªëng.\n\n\
            C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• DocuSeal Pro!\n\n\
            Tr√¢n tr·ªçng,\n\
            DocuSeal Pro",
            to_name, submission_name, submitter_name
        );

        let email = Message::builder()
            .from(format!("{} <{}>", self.from_name, self.from_email).parse()?)
            .to(format!("{} <{}>", to_name, to_email).parse()?)
            .subject(subject)
            .multipart(
                lettre::message::MultiPart::alternative()
                    .singlepart(
                        lettre::message::SinglePart::builder()
                            .header(lettre::message::header::ContentType::TEXT_PLAIN)
                            .body(text_body),
                    )
                    .singlepart(
                        lettre::message::SinglePart::builder()
                            .header(lettre::message::header::ContentType::TEXT_HTML)
                            .body(html_body),
                    ),
            )?;

        let creds = Credentials::new(self.smtp_username.clone(), self.smtp_password.clone());

        let mailer = if self.use_tls {
            AsyncSmtpTransport::<Tokio1Executor>::starttls_relay(&self.smtp_host)?
                .credentials(creds)
                .build()
        } else {
            AsyncSmtpTransport::<Tokio1Executor>::relay(&self.smtp_host)?
                .credentials(creds)
                .build()
        };

        mailer.send(email).await?;
        println!("Completion email sent successfully to: {}", to_email);

        Ok(())
    }
}